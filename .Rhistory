library(SocGen)
setwd("C:/TAMUG/Foroughirad Lab/Kin Association/temporal_kinship")
library(igraph)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
dates <- sort(unique(sightings$Observation.Date))
rs_tab <- table(sightings$Combined.ID)
sightings$ReproSightings <- rs_tab[match(sightings$Combined.ID, names(rs_tab))]
View(sightings)
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
View(affil_females)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Combined.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
View(affil_females)
library(dplyr)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("\\.adult.*", "", Combined.ID))
View(affil_females)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("\\w+\\.\\w+.*", "\\1", Combined.ID))
View(affil_females)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("\\w+\\.\\w+.*", "\\1", Combined.ID))
View(affil_females)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID))
View(affil_females)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste("ALT", sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
View(affil_females)
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
View(affil_females)
repro_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask)
View(affil_sightings)
View(sightings)
View(affil_sightings)
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
View(affil_sightings)
repro_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask)
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
repro_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
repro_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask_repro)
View(repro_network)
repro_network[is.nan(repro_network)] <- 0
repro_network[is.na(repro_network)] <- 0
View(repro_network)
repro_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask_repro)
0
repro_mask_network[is.nan(repro_mask_network)] <- 0
repro_mask_network[is.na(repro_mask_network)] <- 0
repro_network <- graph_from_adjacency_matrix(masked_network, mode = "undirected", weighted = TRUE)
repro_network <- graph_from_adjacency_matrix(repro_mask_network, mode = "undirected", weighted = TRUE)
View(repro_network)
strength(repro_network)
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_repro)
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
View(affil_females)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
View(age_mask_network)
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
View(age_network)
strength(age_network)
View(age_network)
network <- graph_from_adjacency_matrix(masked_network,repro_mask_network, mode = "undirected", weighted = TRUE)
network <- graph_from_adjacency_matrix(age_mask_network,repro_mask_network, mode = "undirected", weighted = TRUE)
summary(repro_network)
# Example edge list
edges <- data.frame(from = c("A", "B", "C"), to = c("B", "C", "A"))
# Create a graph from the edge list
g <- graph_from_data_frame(edges, directed = FALSE)
# Example node attributes
node_attributes <- data.frame(name = c("A", "B", "C"), Repro.ID = c("ID1", "ID2", "ID3"))
# Set Repro.ID as a node attribute
V(g)$Repro.ID <- node_attributes$Repro.ID[match(V(g)$name, node_attributes$name)]
# Print the graph with node attributes
print(g, vertex.attr = TRUE)
plot(g)
V(repro_network)$ReproCat <- sightings$ReproCat[match(V(repro_network)$ReproCat),sightings$ReproCat]
print(repro_network)
for (i in 1:nrow(sightings)) {
repro_network <- set_vertex_attr(repro_network, name = "ReproCat", index = V(repro_network)[sightings$ReproCat[i]], value = sightings$Repro.ID[i])
}
View(repro_network)
V(repro_network) <- sightings$ReproCat[match(V(repro_network)$name, sightings$Repro.ID)]
length(V(repro_network$name))
length(sightings$Repro.ID)
matched_indices <- match(V(repro_network$name), sightings$Repro.ID)
print(class(repro_network))
length(V(repro_network)$name)
matched_indiced <- match(V(repro_network)$name, sightings$Repro.ID)
if (any(is.na(matched_indices))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
if (any(is.na(matched_indiced))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
if (any(is.na(matched_indiced))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
if (any(is.na(matched_indiced))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
if (any(is.na(matched_indiced))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indiced]
print(repro_network, vertex.attr = TRUE)
matched_indices <- match(V(repro_network)$name, sightings$Repro.ID)
if (any(is.na(matched_indices))) {
warning("There are unmatched IDs. Please check your data.")
} else {
# Set the ReproCat attribute
V(repro_network)$ReproCat <- sightings$ReproCat[matched_indices]
}
print(any(is.na(matched_indices)))
plot(repro_network, layout = layout, vertex.label.dist = 3.5, vertex.color = as.factor(V(repro_network)$ReproCat))
layout <- layout_with_kk(repro_network)
plot(repro_network,
layout = layout,
vertex.label.dist = 3.5,
vertex.color = as.factor(V(repro_network)$ReproCat))
plot(repro_network,
layout = layout,
vertex.label.dist = 3.5,
vertex.color = as.factor(V(repro_network)$ReproCat == "preg"))
repro_network <- set_vertex_attr(repro_network, "RepoCat",
value = sightings$ReproCat[match(V(repro_network)$name, sightings$Repro.ID)])
print(repro_network)
repro_network <- set_vertex_attr(repro_network, "ReproCat",
value = sightings$ReproCat[match(V(repro_network)$name, sightings$Repro.ID)])
print(repro_network)
preg_graph <- induced_subgraph(repro_network, which(V(repro_network)$ReproCat == "preg"))
plot(preg_graph, vertex.label = NA, layout = layout_with_fr)
plot(preg_graph, layout = layout_with_fr)
mean(degree(preg_graph))
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
str_repro <- strength(repro_network)
str_repro_df <- data.frame(name = V(repro_network)$name, strength = str_repro)
View(str_repro_df)
write.csv(str_repro_df, "repro_strength.csv", row.names = FALSE)
write.csv(str_repro_df, "Outputs/repro_strength.csv", row.names = FALSE)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
str_age <- strength(age_network)
str_age_df <- data.frame(name = V(age_network)$name, strength = str_age)
write.csv(str_age_df, "Outputs/age_strength.csv", row.names = FALSE)
#Setting vertex attributes to each age class
age_network <- set_vertex_attr(age_network, "AgeClass",
value = sightings$AgeClass[match(V(age_network)$name, sightings$Age.ID)])
print(age_network)
View(affil_females)
View(age_mask_network)
View(affil_females)
View(sightings)
View(affil_females)
View(affil_mask)
# calculate strength (summed edge weights) per ID
strength(network)
network <- graph_from_adjacency_matrix(masked_network, mode = "undirected", weighted = TRUE)
merge_repro_str <- merge(sightings, str_repro_df, by.x = "Repro.ID", by.y = "name", all.x = TRUE)
View(merge_repro_str)
sightings$Repro.ID
print(unique(str_repro_df$name))
