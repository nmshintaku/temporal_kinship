geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 23, size = 4, fill = "white") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 23, size = 4, fill = "red") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 1, size = 4, fill = "red") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point"shape = 2, size = 4, fill = "black") +
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point",shape = 2, size = 4, fill = "black") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 4, fill = "black") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -0.5) +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
theme_minimal()
summary(repro_state_interaction)
repro_results <- Anova(repro_state_interaction, type = "II")
library(car)
repro_results <- Anova(repro_state_interaction, type = "II")
View(repro_results)
View(repro_results)
p_value <- anova_results$`Pr(>F)`[1]
p_value <- repro_results$`Pr(>F)`[1]
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -0.5) +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
annotate("text", x = 1.5, y = max(df$weight), label = paste("p-value:", round(p_value, 4)), size = 5, hjust = 0.5) +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -0.5) +
labs(x = "Shared State", y = "Weight", title = "Boxplot of Weight by Shared State") +
annotate("text", x = 1.5, y = max(repro_combined$weight), label = paste("p-value:", round(p_value, 4)), size = 5, hjust = 0.5) +
theme_minimal()
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -0.5) +
labs(x = "Shared State", y = "Weight") +
annotate("text", x = 1.5, y = max(repro_combined$weight), label = paste("p-value:", round(p_value, 4)), size = 5, hjust = 0.5) +
theme_minimal()
#Repro ANOVA, close kin
repro_kin <- aov(weight ~ Closekin, data = repro_combined)
summary(repro_kin)
View(repro_state_interaction)
View(repro_results)
View(repro_results)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Creating ReproCat column
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
#Creating ReproCat column
extract_age <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_age)
View(affil_females)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Combined.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
#Calculating SRI
masked_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Combined.ID",
mask = affil_mask)
masked_network[is.nan(masked_network)] <- 0
masked_network[is.na(masked_network)] <- 0
combined_list <- mat2dat(masked_network, value.name = "weight")
combined_list$Dolphin.ID1 <- affil_females$Dolphin.ID[match(combined_list$ID1, affil_females$Combined.ID)]
combined_list$Dolphin.ID2 <- affil_females$Dolphin.ID[match(combined_list$ID2, affil_females$Combined.ID)]
combined_pairs <- merge_pairs(combined_list, pairwise,
xID1 = "Dolphin.ID1", xID2 = "Dolphin.ID2",
yID1 = "Dolphin1", yID2 = "Dolphin2",
all.x = TRUE, all.y = FALSE)
combined_pairs <- combined_pairs[which(combined_pairs$weight!= 0),]
combined_pairs <- reduce_pairs(combined_pairs, ID1 = "ID1", ID2 = "ID2")
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
kin_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
#Read in individual combined ID strength calculation
tot_str <- read.csv("Outputs/total_strength.csv")
#Calculating kin strength
str_kin <- strength(kin_graph)
str_kin_df <- data.frame(name = V(kin_graph)$name, strength = str_kin)
#Merge strength calculations
affil_females <- merge(affil_females, str_kin_df, by.x = "Combined.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(kin.strength = strength)
affil_females <- merge(affil_females, tot_str, by.x = "Combined.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(tot.strength = strength)
affil_females <- affil_females %>% filter(!is.na(kin.strength))
#Normalize by kin strength divided by total strength
affil_females$norm.kin <- affil_females$kin.strength / affil_females$tot.strength
View(affil_females)
#Filter out Repro category unknown
affil_females <- affil_females %>% filter(ReproCat != "unknown")
#Plot Raw Close Kin Strength
kinmeans_raw <- affil_females %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(kin.strength, na.rm = TRUE))
#Plot Raw Close Kin Strength with age class
agemeans_raw <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(kin.strength, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = kin.strength, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_raw, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = kinmeans_raw, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age Class", y = "Raw Close Kin Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot Raw Close Kin Strength with age class
agemeans_raw <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(kin.strength, na.rm = TRUE))
View(agemeans_raw)
ggplot(affil_females, aes(x = AgeCat, y = kin.strength, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_raw, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_raw, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age Class", y = "Raw Close Kin Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot Normalized close kin strength with age class
agemeans_norm <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(norm.kin, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = norm.kin, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_norm, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_norm, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age Class", y = "Normalized Close Kin Strength") +
theme_minimal() +
theme(legend.position = "none")
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Creating ReproCat column
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
affil_females <- affil_females %>% filter(ReproCat != "unknown")
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
affil_sightings <- affil_sightings %>% filter(ReproCat != "unknown")
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
#Calculating SRI
masked_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask)
masked_network[is.nan(masked_network)] <- 0
masked_network[is.na(masked_network)] <- 0
combined_list <- mat2dat(masked_network, value.name = "weight")
combined_list$Dolphin.ID1 <- affil_females$Dolphin.ID[match(combined_list$ID1, affil_females$Repro.ID)]
combined_list$Dolphin.ID2 <- affil_females$Dolphin.ID[match(combined_list$ID2, affil_females$Repro.ID)]
combined_pairs <- merge_pairs(combined_list, pairwise,
xID1 = "Dolphin.ID1", xID2 = "Dolphin.ID2",
yID1 = "Dolphin1", yID2 = "Dolphin2",
all.x = TRUE, all.y = FALSE)
combined_pairs <- combined_pairs[which(combined_pairs$weight!= 0),]
combined_pairs <- reduce_pairs(combined_pairs, ID1 = "ID1", ID2 = "ID2")
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
synchrony_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
age <- read.csv("Outputs/affil_age_strength.csv")
kin <- read.csv("Outputs/affil_kin_strength.csv")
repro <- read.csv("Outputs/affil_repro_strength.csv")
#Filter out Repro category unknown
repro <- repro %>% filter(ReproCat != "unknown")
repro <- repro %>%
filter(!is.na(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
#Repro ANOVA
repro_anova <- aov(norm.repro.indiv ~ ReproCat, data = repro)
summary(repro_anova)
plot(repro_anova)
print(repro_tukey)
repro_tukey <- TukeyHSD(repro_anova)
print(repro_tukey)
#Close Kin ANOVA
kin_anova <- aov(DyadML ~ Closekin, data = combined_pairs)
summary(kin_anova)
kin_tukey <- TukeyHSD(kin_anova)
print(kin)
View(combined_pairs)
#Age ANOVA
age_anova <- aov(norm.age ~ AgeCat, data = age)
summary(age_anova)
age_tukey <- TukeyHSD(age_anova)
print(age_tukey)
#Repro ANOVA, same state vs different state results
shared_state <- function(dolphin_id) {
return(strsplit(dolphin_id, "\\.")[[1]][2])
}
# Apply the function to create new columns for states
repro_combined <- combined_pairs %>%
mutate(State1 = sapply(ID1, shared_state),
State2 = sapply(ID2, shared_state))
# Check if the states are the same and create the shared_state column
repro_combined <- repro_combined %>%
mutate(shared_state = ifelse(State1 == State2, "Y", "N"))
# Drop the temporary state columns
repro_combined <- repro_combined %>%
select(-State1, -State2)
repro_state <- aov(weight ~ shared_state, data = repro_combined)
summary(repro_state)
repro_state_interaction <- aov(weight ~ shared_state * Closekin, data = repro_combined)
summary(repro_state_interaction)
repro_results <- Anova(repro_state_interaction, type = "II")
p_value <- repro_results$`Pr(>F)`[1]
ggplot(repro_combined, aes(x = shared_state, y = weight)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2) +
stat_summary(fun = mean, geom = "point", shape = 16, size = 3, fill = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -0.5) +
labs(x = "Shared State", y = "Weight") +
annotate("text", x = 1.5, y = max(repro_combined$weight), label = paste("p-value:", round(p_value, 4)), size = 5, hjust = 0.5) +
theme_minimal()
View(repro_state_interaction)
View(repro_combined)
View(repro_combined)
View(affil_females)
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_state)
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_repro)
age_sightings <- table(affil_sightings$Age.ID)
View(affil_females)
affil_females$AgeSightings <- age_sightings[match(affil_females$Age.ID,
names(age_sightings))]
affil_females <- affil_females[which(affil_females$AgeSightings >= 10),]
affil_females <- affil_females[!duplicated(affil_females$Age.ID),]
affil_sightings <- affil_sightings[which(affil_sightings$Age.ID %in% affil_females$Age.ID),]
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
str_age <- strength(age_network)
str_age_df <- data.frame(name = V(age_network)$name, strength = str_age)
View(str_age_df)
#Read in individual combined ID strength calculation
tot_str <- read.csv("Outputs/total_strength.csv")
affil_females <- merge(affil_females, tot_str, by.x = "Combined.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(tot.strength = strength)
#Merge strength calculations
affil_females <- merge(affil_females, str_age_df, by.x = "Age.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(age.strength = strength)
View(affil_females)
#Normalize by kin strength divided by total strength
affil_females$norm.age <- affil_females$age.strength / affil_females$tot.strength
#Calculating total average strength per individual across all age classes
affil_females <- affil_females %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.age.str = mean(age.strength),
norm.age.indiv = age.strength / avg.tot.age.str)
#Filter out Repro category unknown
affil_females <- affil_females %>% filter(ReproCat != "unknown")
#Plot Raw Age Strength
agemeans_raw <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(age.strength, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = age.strength, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_raw, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_raw, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Raw Age Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot Normalized age strength (raw age strength / tot strength)
agemeans_norm <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(norm.age, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = norm.age, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_norm, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_norm, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Normalized Age Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot age strength normalized to individual with average shown across each state
agemeans_indiv <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(norm.age.indiv, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = norm.age.indiv, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_indiv, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_indiv, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Normalized Age Strength to Individual") +
theme_minimal() +
theme(legend.position = "none")
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_state)
#Creating ReproCat column
extract_repro <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_repro)
age_sightings <- table(affil_sightings$Age.ID)
affil_females$AgeSightings <- age_sightings[match(affil_females$Age.ID,
names(age_sightings))]
affil_females <- affil_females[which(affil_females$AgeSightings >= 10),]
affil_females <- affil_females[!duplicated(affil_females$Age.ID),]
affil_sightings <- affil_sightings[which(affil_sightings$Age.ID %in% affil_females$Age.ID),]
View(affil_females)
View(affil_sightings)
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
str_age <- strength(age_network)
str_age_df <- data.frame(name = V(age_network)$name, strength = str_age)
#Read in individual combined ID strength calculation
tot_str <- read.csv("Outputs/total_strength.csv")
affil_females <- merge(affil_females, tot_str, by.x = "Combined.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(tot.strength = strength)
#Merge strength calculations
affil_females <- merge(affil_females, str_age_df, by.x = "Age.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(age.strength = strength)
View(affil_females)
#Setting vertex attributes to each age class
age_network <- set_vertex_attr(age_network, "AgeClass",
value = sightings$AgeClass[match(V(age_network)$name, sightings$Age.ID)])
#Normalize by kin strength divided by total strength
affil_females$norm.age <- affil_females$age.strength / affil_females$tot.strength
#Calculating total average strength per individual across all age classes
affil_females <- affil_females %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.age.str = mean(age.strength),
norm.age.indiv = age.strength / avg.tot.age.str)
#Filter out Repro category unknown
affil_females <- affil_females %>% filter(ReproCat != "unknown")
#No Nan or inf
affil_females <- affil_females %>%
filter(!is.nan(norm.age) & !is.infinite(norm.age))
#Plot Raw Age Strength
agemeans_raw <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(age.strength, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = age.strength, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_raw, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_raw, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Raw Age Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot Normalized age strength (raw age strength / tot strength)
agemeans_norm <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(norm.age, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = norm.age, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_norm, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_norm, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Normalized Age Strength") +
theme_minimal() +
theme(legend.position = "none")
#Plot age strength normalized to individual with average shown across each state
agemeans_indiv <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(norm.age.indiv, na.rm = TRUE))
ggplot(affil_females, aes(x = AgeCat, y = norm.age.indiv, fill = AgeCat)) +
geom_boxplot() +
geom_segment(data = agemeans_indiv, aes(x = as.numeric(AgeCat) - 0.2, xend = as.numeric(AgeCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = agemeans_indiv, aes(x = AgeCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Age State", y = "Normalized Age Strength to Individual") +
theme_minimal() +
theme(legend.position = "none")
