avg.cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(avg.cyc = mean(repro.strength)) %>%
pull(avg.cyc)
avg.preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength)) %>%
pull(avg.preg)
avg.juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength)) %>%
pull(avg.juvenile)
View(avg.juvenile)
#Repro Analysis
#Average raw value per repro category across all females
avg.lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(avg.lact = mean(repro.strength)) %>%
pull(avg.lact)
avg.cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(avg.cyc = mean(repro.strength)) %>%
pull(avg.cyc)
avg.preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength)) %>%
pull(avg.preg)
avg.juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength))
View(avg.juvenile)
avg.lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(avg.lact = mean(repro.strength))
avg.cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(avg.cyc = mean(repro.strength))
avg.preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength))
avg.juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(avg.juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(avg.cyc, avg.juvenile, avg.lact, avg.preg)
View(avg_repro_strength)
#Normalize avg value of each repro category to the individual level (dividing by count of individuals in each category)
total_avg <- sum(avg_repro_strength)
norm_values <- avg_repro_strength / total_avg
View(norm_values)
avg_norm_values <- mean(norm_values)
View(norm_values)
norm_values <- as.numeric(norm_values)
avg_norm_values <- mean(norm_values)
norm_values <- avg_repro_strength / total_avg
View(norm_values)
View(affil_females)
View(norm_values)
View(avg_repro_strength)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID)) {
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID)) {
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
state <- extract_state(Repro.ID)
return(repro.strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
state <- paste0("avg.", extract_state(Repro.ID))
return(repro.strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
return(strength / avg_repro_strength[state])
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
state <- paste0("avg.", extract_state(Repro.ID))
return(strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
affil_females$norm_repro <- mapply(function(strength, Repro.ID) {
state <- paste0("avg.", extract_state(Repro.ID))
return(strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
#Repro Analysis
#Average raw value per repro category across all females
lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(avg.lact = mean(repro.strength))
cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(avg.cyc = mean(repro.strength))
preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength))
juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(avg.juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(avg.cyc, avg.juvenile, avg.lact, avg.preg)
View(avg_repro_strength)
avg_repro_strength <- bind_cols(cyc, juvenile, lact, preg)
View(avg_repro_strength)
lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(avg.lact = mean(repro.strength))
cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(avg.cyc = mean(repro.strength))
preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(avg.preg = mean(repro.strength))
juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(avg.juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(cyc, juvenile, lact, preg)
View(avg_repro_strength)
View(juvenile)
lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(lact = mean(repro.strength))
cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(cyc = mean(repro.strength))
preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(preg = mean(repro.strength))
juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(cyc, juvenile, lact, preg)
View(avg_repro_strength)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
state <- extract_state(Repro.ID)
return(repro.strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
View(avg_repro_strength)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
state <- extract_state(Repro.ID)
return(repro.strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
str(avg_repro_strength)
affil_females$ReproCat <- sapply(data$Repro.ID, extract_state)
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
View(affil_females)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
return(repro.strength / avg_repro_strength[state])
}, affil_females$repro.strength, affil_females$Repro.ID)
affil_females$norm_repro <- mapply(function(repro.strength, Repro.ID) {
avg_value <- avg_repro_strength$avg_value[avg_repro_strength$ReproCat == ReproCat]
return(repro.strength / avg_value)
}, affil_females$repro.strength, affil_females$Repro.ID)
View(avg_repro_strength)
affil_females$norm_repro <- mapply(function(repro.strength, ReproCat) {
avg_value <- avg_repro_strength[[ReproCat]]
return(repro.strength / avg_value)
}, affil_females$repro.strength, affil_females$ReproCat)
View(affil_females)
affil_females[affil_females == ""] <- NA
View(affil_females)
affil_females[affil_females == "character (0)"] <- NA
affil_females[norm_repro == "character (0)"] <- NA
affil_females$norm_repro[affil_females$norm_repro == "character(0)"] <- NA
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, affil_females, mean)
no_unk_affil <- subset(affil_females, ReproCat != "unknown")
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, no_unk_affil, mean)
no_unk_affil$norm_repro <- as.numeric(no_unk_affil$norm_repro)
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, no_unk_affil, mean)
print(avg_norm_repro)
View(no_unk_affil)
boxplot(norm_repro ~ ReproCat, no_unk_affil = no_unk_affil,
xlab = "Repro State", ylab = "Normalized Strength",
col = "lightblue")
boxplot(no_unk_affil$norm_repro ~ ReproCat, no_unk_affil = no_unk_affil,
xlab = "Repro State", ylab = "Normalized Strength",
col = "lightblue")
boxplot(norm_repro ~ ReproCat, no_unk_affil = no_unk_affil,
xlab = "Repro State", ylab = "Normalized Strength",
col = "lightblue")
library(ggplot2)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
View(avg_norm_repro)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red") +
stat_summary(fun = mean, geom = "text", aes(label = round(..y..,2)), vjust = -0.5, color = "red") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
#Average value of normalized repro
norm.lact <- no_unk_affil %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(lact = mean(norm_repro))
View(norm.lact)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, no_unk_affil, mean)
View(avg_norm_repro)
View(avg_repro_strength)
View(affil_females)
View(affil_sightings)
View(affil_females)
View(affil_sightings)
#STEP 2 Normalizing by individual
no_unk_affil$avg.tot.str <- aggregate(repro.strength ~ Dolphin.ID, mean)
#STEP 2 Normalizing by individual
no_unk_affil$avg.tot.str <- ave(no_unk_affil$repro.strength ~ no_unk_affil$Dolphin.ID, FUN = mean)
#STEP 2 Normalizing by individual
no_unk_affil <- no_unk_affil %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.str = mean(repro.strength))
View(str_repro_df)
View(affil_sightings)
#Filter out reprosightings >= 5 from affil_sightings
filtered_sightings <-
#Calculating total average strength per individual across all states
no_unk_affil <- no_unk_affil %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.str = mean(repro.strength),
norm.repro.indiv = avg.tot.str / repro.strength)
#No Nan or inf
clean_affil <- no_unk_affil %>%
filter(!is.nan(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
View(clean_affil)
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
View(affil_sightings)
View(affil_sightings)
#Filter out reprosightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
View(filtered_sightings)
no_unk_affil <- no_unk_affil %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
View(no_unk_affil)
#Calculating total average strength per individual across all states
no_unk_affil <- no_unk_affil %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.str = mean(repro.strength),
norm.repro.indiv = avg.tot.str / repro.strength)
View(no_unk_affil)
#No Nan or inf
clean_affil <- no_unk_affil %>%
filter(!is.nan(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
View(clean_affil)
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
stat_summary(fun = mean, geom = "line", aes(group = 1), color = "black", size = 1) +
stat_summary(fun = mean, geom = "text", aes(label = round(..y..,2)), vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
stat_summary(fun.data = function(y){
data.frame(y = mean(y), ymin = quantile(y, 0.25), ymax = quantile(y, 0.72))
},
geom = "errorbar", aes(ymin = ymin, ymax = ymax), width = 0.75, color = "black", size = 1) +
stat_summary(fun = mean, geom = "text", aes(label = round(..y..,2)), vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
stat_summary(fun = mean, geom = "segment", aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2, y = ..y.., yend = ..y..), color = "black", size = 1) +
stat_summary(fun = mean, geom = "text", aes(label = round(..y..,2)), vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
#plot normalized values with average shown across each state
means <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm.repro.indiv, na.rm = TRUE))
View(means)
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(means, aes(x = ReproCat, y = mean_value, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength")+
theme_minimal() +
theme(legend.position = "none")
View(pairwise)
#Setting edge attributes for close kin
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
View(pairwise)
View(pairwise)
print(repro_network)
print(network)
View(affil_mask)
View(masked_network)
lsf.str(SocGen)
lsf.str("package:SocGen")
View(repro_mask_network)
View(repro_network)
View(affil_sightings)
View(clean_affil)
View(affil_sightings)
View(filtered_sightings)
View(affil_females)
View(affil_females)
View(clean_affil)
View(no_unk_affil)
View(clean_affil)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(clean_affil,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
clean_affil$entrydate <- as.Date(clean_affil$entrydate)
clean_affil$departdate <- as.Date(clean_affil$departdate)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(clean_affil,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
dates <- as.numeric(unlist(dates))
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(clean_affil,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
View(affil_females)
print(repro_network)
print(network)
combined_matrix <- mat2dat(masked_network)
View(combined_matrix)
combined_paris <- merge_pairs(masked_network)
combined_paris <- merge_pairs(combined_matrix, xID1 = "ID1", xID2 = "ID2", yID1 = XID1, yID2 = XID2)
combined_pairs <- merge_pairs(combined_matrix, combined_matrix, xID1 = "ID1", xID2 = "ID2", yID1 = XID1, yID2 = XID2)
combined_pairs <- merge_pairs(combined_matrix, combined_matrix, xID1 = "ID1", xID2 = "ID2")
View(combined_pairs)
combined_list <- mat2dat(masked_network)
combined_pairs <- merge_pairs(combined_matrix, xID1 = "ID1", xID2 = "ID2")
View(combined_list)
View(pairwise)
combined_pairs <- merge_pairs(combined_list, pairwise, xID1 = "ID1", xID2 = "ID2", yID1 = "Dolphin 1", yID2 = "Dolphin 2")
View(sightings)
View(combined_pairs)
get.edge.ids()
edge_ids <- get.edge.ids(network, combined_list)
str(combined_list)
combined_list <- combined_list %>% select(-values)
View(combined_list)
edge_ids <- get.edge.ids(network, combined_list)
combined_list <- as.numeric(unlist(combined_list))
edge_ids <- get.edge.ids(network, combined_list)
combined_list <- mat2dat(masked_network)
View(combined_list)
View(pairwise)
View(combined_list)
View(combined_list)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
View(repro_pairwise)
View(repro_pairwise)
View(pairwise)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1 <- sub("\\..*", "", ID1),
ID2 <- sub("\\..*","", ID2),
unique_pair = paste(ID1, ID2, sep = ".")
) %>%
distinct(unique_pair, .keep_all = TRUE)
View(repro_pairwise)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1 = sub("\\..*", "", ID1),
ID2 = sub("\\..*","", ID2),
unique_pair = paste(ID1, ID2, sep = ".")
) %>%
distinct(unique_pair, .keep_all = TRUE)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair)
View(repro_pairwise)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
unique_pair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(unique_pair, .keep_all = TRUE)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair) %>%
left_join(pairwise, by = c("unique_pairs" = "IDpairs")) %>%
select(-IDpair)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair) %>%
left_join(pairwise, by = c("unique_pair" = "IDpairs")) %>%
select(-IDpair)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair) %>%
left_join(pairwise, by = c("unique_pair" = "IDpair")) %>%
select(-IDpair)
View(pairwise)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair) %>%
left_join(pairwise %>% select(IDpair, Closekin), by = c("unique_pair" = "IDpair"))
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair) %>%
left_join(pairwise %>% select(IDPair, Closekin), by = c("unique_pair" = "IDpair"))
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
left_join(pairwise %>% select(IDPair, Closekin), by = c("unique_pair" = "IDpair"))
str(pairwise)
repro_pairwise <- repro_pairwise %>%
left_join(pairwise %>% select(IDPair, Closekin), by = c("unique_pair" = "IDpair"))
str(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
IDPair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(unique_pair, .keep_all = TRUE)
View(repro_pairwise)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
IDPair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(unique_pair, .keep_all = TRUE)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
IDPair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(IDPair, .keep_all = TRUE)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
repro_pairwise <- repro_pairwise %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
IDPair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(IDPair, .keep_all = TRUE)
View(repro_pairwise)
repro_pairwise <- repro_pairwise %>%
filter(unique_pair %in% pairwise$IDPair)
repro_pairwise <- repro_pairwise %>%
filter(IDPair %in% pairwise$IDPair)
repro_pairwise <- repro_pairwise %>%
left_join(pairwise %>% select(IDPair, Closekin), by = "IDPair")
View(repro_pairwise)
print(repro_network)
#Setting edge attributes for close kin
repro_pairwise <- mat2dat(repro_mask_network)
View(repro_pairwise)
edge_ids <- get.edge.ids(repro_network, repro_pairwise)
#Setting edge attributes for close kin
repro_pairwise1 <- mat2dat(repro_mask_network)
repro_pairwise <- repro_pairwise1 %>%
mutate(
ID1_pre = sub("\\..*", "", ID1),
ID2_pre = sub("\\..*","", ID2),
IDPair = paste(ID1_pre, ID2_pre, sep = ".")
) %>%
distinct(IDPair, .keep_all = TRUE)
repro_pairwise <- repro_pairwise %>%
filter(IDPair %in% pairwise$IDPair)
repro_pairwise <- repro_pairwise %>%
left_join(pairwise %>% select(IDPair, Closekin), by = "IDPair")
repro_pairwise1 <- repro_pairwise1 %>% select(-values)
repro_pairwise2 <- as.numeric(unlist(repro_pairwise1))
View(repro_pairwise1)
View(repro_pairwise)
repro_network <- set_edge_attr(repro_network, "CloseKin",
value = repro_pairwise$Closekin[match(V(repro_network)$name, repro_pairwise$IDPair)])
combined_list <- mat2dat(masked_network)
View(combined_list)
