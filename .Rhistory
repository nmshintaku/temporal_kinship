library(bisonR)
library(brms)
#Create edge model
fit_edge <- bison_model(
(pair.count | total.count) ~ DyadML(ID1, ID2),
data = combined_pairs,
family = gaussian)
get_default_priors()
get_default_priors("model_type")
get_default_priors("gaussian")
#Create edge model
fit_edge <- bison_model(
(pair.count | total.count) ~ DyadML(ID1, ID2),
data = combined_pairs)
get_default_priors("Poisson")
#Create edge model
fit_edge <- bison_model(
(pair.count | total.count) ~ DyadML(ID1, ID2),
data = combined_pairs,
model_type = "count")
#Create edge model
fit_edge <- bison_model(
(pair.count | total.count) ~ dyad(ID1, ID2),
data = combined_pairs,
model_type = "count")
cmdstanr::install_cmdstan()
library(cmdstanr)
#Create edge model
fit_edge <- bison_model(
(pair.count | total.count) ~ dyad(ID1, ID2),
data = combined_pairs,
model_type = "count")
summary(fit_edge)
print(network)
#Run dyadic regression
dyadic <- bison_brm(
bison(edge_weight(ID1, ID2)) ~ DyadML + (1|mm(ID1, ID2)),
fit_edge,
combined_pairs,
family = bernoulli
)
#Run dyadic regression
dyadic <- bison_brm(
bison(edge_weight(ID1, ID2)) ~ DyadML + (1|mm(ID1, ID2)),
fit_edge,
combined_pairs
)
#Run dyadic regression
dyadic <- bison_brm(
bison(edge_weight(ID1, ID2)) ~ DyadML + (1|mm(ID1, ID2)),
fit_edge,
combined_pairs,
chains = 2,
cores = 4
)
age <- read.csv("Outputs/affil_age_strength.csv")
kin <- read.csv("Outputs/affil_kin_strength.csv")
repro <- read.csv("Outputs/affil_repro_strength.csv")
View(repro)
repro_anova <- aov(norm.repro.indiv ~ ReproCat, data = repro)
summary(repro_anova)
levene.test(norm.repro.indiv ~ ReproCat, data = repro)
leveneTest(norm.repro.indiv ~ ReproCat, data = repro)
plot(repro_anova)
View(kin)
#Close Kin ANOVA
kin_anova <- aov(DyadML ~ Closekin, data = combined_pairs)
View(kin_anova)
summary(kin_anova)
plot(kin_anova)
View(age)
#Age ANOVA
age_anova <- aov(norm.age ~ AgeCat, data = age)
summary(age_anova)
plot(age_anova)
repro_tukey <- TukeyHSD(repro_anova)
print(repro_tukey)
kin_tukey <- TukeyHSD(kin_anova)
print(kin_tukey)
age_tukey <- TukeyHSD(age_anova)
print(age_anova)
print(age_tukey)
plot(repro_tukey)
View(combined_list)
View(combined_pairs)
View(combined_pairs)
View(combined_list)
View(pairwise)
View(combined_pairs)
View(kin)
View(combined_list)
View(combined_pairs)
#Running bison simulation model
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary_conjugate")
prior_check(priors, "binary_conjugate")
priors$edge = "beta(2,2)"
fit_edge_sim <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data = df,
model_type = "binary_conjugate",
priors = priors
)
fit_brm_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ relatedness
+ (1|mm(node_1_id, node_2,id)),
fit_edge_sim,
df_edge,
family = bernoulli
)
fit_brm_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ relatedness
+ (1|mm(node_1_id, node_2,id)),
fit_edge_sim,
df,
family = bernoulli
)
fit_brm_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ relatedness
+ (1|mm(node_1_id, node_2_id)),
fit_edge_sim,
df,
family = bernoulli
)
View(df)
priors$edge = "normal(-1, 2.5)"
fit_edge_sim <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data = df,
model_type = "binary_conjugate",
priors = priors
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df,
num_draws = 5,
refresh = 0
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
View(df_dyadic)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df_dyadic,
num_draws = 5,
refresh = 0
)
#Running bison simulation model
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
priors <- get_default_priors("binary_conjugate")
prior_check(priors, "binary_conjugate")
priors$edge = "normal(-1, 2.5)"
fit_edge_sim <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data = df,
model_type = "binary_conjugate",
priors = priors
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df_dyadic,
num_draws = 5,
refresh = 0
)
View(df)
#Running bison simulation model
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
priors <- get_default_priors("binary_conjugate")
prior_check(priors, "binary_conjugate")
priors$edge = "normal(-1, 2.5)"
fit_edge_sim <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data = df,
model_type = "binary_conjugate",
priors = priors
)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df,
num_draws = 5,
refresh = 0
)
#Run dyadic regression
dyadic <- bison_brm(
bison(edge_weight(ID1, ID2)) ~ DyadML,
fit_edge,
combined_pairs,
chains = 2,
cores = 4
)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df,
num_draws = 5,
refresh = 0
)
library(dplyr)
fit_edge_sim <- bison_brm(
bison(edge_weight(node_1_id, node_2_id)) ~ age_diff,
fit_edge_sim,
df,
num_draws = 5,
refresh = 0
)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Adding separate columns for Repro.ID and Age.ID
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_state)
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
View(affil_mask_age)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
View(age_mask_network)
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
str_age <- strength(age_network)
str_age_df <- data.frame(name = V(age_network)$name, strength = str_age)
View(str_age_df)
#Read in individual combined ID strength calculation
tot_str <- read.csv("Outputs/total_strength.csv")
affil_females <- merge(affil_females, tot_str, by.x = "Combined.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(tot.strength = strength)
View(affil_females)
#Merge strength calculations
affil_females <- merge(affil_females, str_age_df, by.x = "Age.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(age.strength = strength)
View(affil_females)
#Setting vertex attributes to each age class
age_network <- set_vertex_attr(age_network, "AgeClass",
value = sightings$AgeClass[match(V(age_network)$name, sightings$Age.ID)])
#Filter out repro sightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
affil_females <- affil_females %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
View(age_network)
#Normalize by kin strength divided by total strength
affil_females$norm.age <- affil_females$age.strength / affil_females$tot.strength
#Calculating total average strength per individual across all age classes
affil_females <- affil_females %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.age.str = mean(age.strength),
norm.age.indiv = age.strength / avg.tot.age.str)
#Plot Raw Age Strength
agemeans_raw <- affil_females %>%
group_by(AgeCat) %>%
summarise(mean_value = mean(age.strength, na.rm = TRUE))
View(agemeans_raw)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Combined.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
repro_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask_repro)
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Combined.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Adding separate columns for Repro.ID and Age.ID
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
repro_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask_repro)
repro_mask_network[is.nan(repro_mask_network)] <- 0
repro_mask_network[is.na(repro_mask_network)] <- 0
repro_network <- graph_from_adjacency_matrix(repro_mask_network, mode = "undirected", weighted = TRUE)
str_repro <- strength(repro_network)
str_repro_df <- data.frame(name = V(repro_network)$name, strength = str_repro)
View(str_repro_df)
#Scratch
age <- read.csv("Outputs/age_strength.csv")
View(age)
View(affil_females)
View(affil_females)
#Merge repro strength to affil females dataframe
affil_females <- merge(affil_females, str_repro_df, by.x = "Repro.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(repro.strength = strength)
affil_sightings <- merge(affil_sightings, str_repro_df, by.x = "Repro.ID", by.y = "name", all.x = TRUE)
affil_sightings <- affil_sightings %>% rename(repro.strength = strength)
#Average raw value per repro category across all females
lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(lact = mean(repro.strength))
cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(cyc = mean(repro.strength))
preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(preg = mean(repro.strength))
juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(cyc, juvenile, lact, preg)
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
affil_females$norm_repro <- mapply(function(repro.strength, ReproCat) {
avg_value <- avg_repro_strength[[ReproCat]]
return(repro.strength / avg_value)
}, affil_females$repro.strength, affil_females$ReproCat)
#Code not working to get rid of character 0
affil_females$norm_repro[affil_females$norm_repro == "character(0)"] <- NA
#filter out unknown ReproCat
no_unk_affil <- subset(affil_females, ReproCat != "unknown")
no_unk_affil$norm_repro <- as.numeric(no_unk_affil$norm_repro)
#Filter out repro sightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
no_unk_affil <- no_unk_affil %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
View(no_unk_affil)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Adding separate columns for Repro.ID and Age.ID
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_state)
#Filter out repro sightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
affil_females <- affil_females %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
View(affil_females)
count(affil_females$AgeCat)
age_count <- table(affil_females$AgeCat)
table(affil_females$AgeCat)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Adding separate columns for Repro.ID and Age.ID
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
affil_females$AgeCat <- sapply(affil_females$Age.ID, extract_state)
View(affil_females)
affil_mask_age <- schedulize(affil_females,
id = "Age.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
age_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Age.ID",
mask = affil_mask_age)
age_mask_network[is.nan(age_mask_network)] <- 0
age_mask_network[is.na(age_mask_network)] <- 0
age_network <- graph_from_adjacency_matrix(age_mask_network, mode = "undirected", weighted = TRUE)
View(age_network)
View(affil_mask_age)
str_age <- strength(age_network)
str_age_df <- data.frame(name = V(age_network)$name, strength = str_age)
View(str_age_df)
View(str_age_df)
#Creating AgeCat column
extract_state <- function(Age.ID) {
return(sub(".*\\.", "", Age.ID))
}
str_age_df$AgeCat <- sapply(str_age_df$name, extract_state)
table(str_age_df$AgeCat)
