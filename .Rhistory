library(SocGen)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
setwd("C:/TAMUG/Foroughirad Lab/Kin Association/temporal_kinship")
age <- read.csv("Outputs/affil_age_strength.csv")
kin <- read.csv("Outputs/affil_kin_strength.csv")
repro <- read.csv("Outputs/affil_repro_strength.csv")
#Filter out Repro category unknown
repro <- repro %>% filter(ReproCat != "unknown")
library(dplyr)
#Filter out Repro category unknown
repro <- repro %>% filter(ReproCat != "unknown")
repro <- repro %>%
filter(!is.na(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
View(repro)
#Repro ANOVA
repro_anova <- aov(norm.repro.indiv ~ ReproCat, data = repro)
repro <- read.csv("Outputs/affil_repro_strength.csv")
#Filter out Repro category unknown
repro <- repro %>% filter(ReproCat != "unknown")
repro <- repro %>%
filter(!is.na(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
means <- repro %>%
group_by(ReproCat) %>%
summarize(mean_value = mean(norm.repro.indiv))
#Repro ANOVA, same state vs different state results
shared_state <- function(dolphin_id) {
return(strsplit(dolphin_id, "\\.")[[1]][2])
}
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
View(affil_females)
#Creating ReproCat column
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
View(affil_females)
affil_females <- affil_females %>% filter(ReproCat != "unknown")
View(affil_females)
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
affil_sightings <- affil_sightings %>% filter(ReproCat != "unknown")
View(affil_sightings)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
#library(readr)
#library(car)
library(SocGen)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
#Calculating SRI
masked_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask)
masked_network[is.nan(masked_network)] <- 0
masked_network[is.na(masked_network)] <- 0
combined_list <- mat2dat(masked_network, value.name = "weight")
combined_list$Dolphin.ID1 <- affil_females$Dolphin.ID[match(combined_list$ID1, affil_females$Repro.ID)]
combined_list$Dolphin.ID2 <- affil_females$Dolphin.ID[match(combined_list$ID2, affil_females$Repro.ID)]
combined_pairs <- merge_pairs(combined_list, pairwise,
xID1 = "Dolphin.ID1", xID2 = "Dolphin.ID2",
yID1 = "Dolphin1", yID2 = "Dolphin2",
all.x = TRUE, all.y = FALSE)
combined_pairs <- combined_pairs[which(combined_pairs$weight!= 0),]
combined_pairs <- reduce_pairs(combined_pairs, ID1 = "ID1", ID2 = "ID2")
View(combined_pairs)
write.csv(combined_pairs, "Outputs/combined_pairs.csv", row.names = FALSE)
View(combined_pairs)
shared_state <- function(dolphin_id) {
return(strsplit(dolphin_id, "\\.")[[1]][2])
}
# Apply the function to create new columns for states
repro_combined <- combined_pairs %>%
mutate(State1 = sapply(ID1, shared_state),
State2 = sapply(ID2, shared_state))
View(repro_combined)
# Check if the states are the same and create the shared_state column
repro_combined <- repro_combined %>%
mutate(shared_state = ifelse(State1 == State2, "Y", "N"))
View(repro_combined)
# Drop the temporary state columns
repro_combined <- repro_combined %>%
select(-State1, -State2)
View(repro_combined)
# Apply the function to create new columns for states
repro_combined <- combined_pairs %>%
mutate(State1 = sapply(ID1, shared_state),
State2 = sapply(ID2, shared_state))
# Check if the states are the same and create the shared_state column
repro_combined <- repro_combined %>%
mutate(shared_state = ifelse(State1 == State2, "Y", "N"))
View(repro_combined)
write.csv(combined_pairs, "Outputs/combined_pairs.csv", row.names = FALSE)
write.csv(repro_combined, "Outputs/combined_pairs.csv", row.names = FALSE)
combined_pairs <- read.csv("Outputs/combined_pairs.csv")
View(combined_pairs)
View(combined_pairs)
combined_pairs <- read.csv("Outputs/combined_pairs.csv")
View(combined_pairs)
library(ggplot2)
ggplot(combined_pairs, aes(x = interaction(State1, State2), y = weight)) +
geom_boxplot() +
labs(x = "Repro States", y = "Association Coefficient") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(combined_pairs)
View(combined_pairs)
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
library(igraph)
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
network <- set_vertex_attr(network, "ReproCat",
value = sightings$ReproCat[match(V(network)$name, sightings$Repro.ID)])
sightings <- read.csv("Outputs/sightings.csv")
dates <- sort(unique(sightings$Observation.Date))
network <- set_vertex_attr(network, "ReproCat",
value = sightings$ReproCat[match(V(network)$name, sightings$Repro.ID)])
synchrony_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
View(combined_pairs)
length(unique(combined_pairs$Dolphin.ID1))
length(unique(combined_pairs$Dolphin.ID2))
#Plot network for all females
plot(network)
#Plot network for all females
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3)
#Plot network for all females
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, layout = layout_with_fr())
#Plot network for all females
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, layout = layout_with_fr(network))
#Plot network for all females
V(network)$color <- "blue"
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, vertex.color = V(network)$color)
#Plot network for all females
V(network)$color <- "skyblue"
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, vertex.color = V(network)$color)
#Plot network for all females with close kin edge weighted
E(synchrony_graph)$width <- 1
plot(synchrony_graph, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, vertex.color = V(network)$color)
plot(synchrony_graph, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, vertex.color = V(network)$color,
edge.width = E(synchrony_graph)$width)
#Plot network for all females
V(network)$color <- "skyblue"
plot(network, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3, vertex.color = V(network)$color)
str(network)
#Plot network for females who are both pregnant
preg_ver <- V(network)[V(network)$ReproCat == "preg"]
preg_subgraph <- induced.subgraph(network, preg_ver)
preg_subgraph <- induced_subgraph(network, preg_ver)
plot(preg_subgraph, vertex.label = NA, vertex.size = 10, edge.arrow.size = 0.5, vertex.color = "yellow")
plot(preg_subgraph, vertex.label = NA, vertex.size = 10, edge.arrow.size = 0.5, vertex.color = "deeppink4")
plot(lact_subgraph, vertex.label = NA, vertex.size = 10, edge.arrow.size = 0.5, vertex.color = "coral2")
#Plot network for females who are both lactating
lact_ver <- V(network)[V(network)$ReproCat == "lact"]
lact_subgraph <- induced_subgraph(network, lact_ver)
plot(lact_subgraph, vertex.label = NA, vertex.size = 10, edge.arrow.size = 0.5, vertex.color = "coral2")
