library(SocGen)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
setwd("C:/TAMUG/Foroughirad Lab/Kin Association/temporal_kinship")
library(SocGen)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
indiv_covars <- read.csv("Outputs/individual_covariates.csv")
indiv_covars$entrydate <- as.Date(indiv_covars$entrydate)
indiv_covars$departdate <- as.Date(indiv_covars$departdate)
sightings <- read.csv("Outputs/sightings.csv")
pairwise <- read.csv("Outputs/pairwise_covariates.csv")
#Removing NA in pairwise
pairwise <- pairwise %>%
filter(!is.na(DyadML))
dates <- sort(unique(sightings$Observation.Date))
#Adding separate columns for Repro.ID and Age.ID
sightings <- sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
relatedness <- read.csv("Raw Data/RelatednessEstimates_2024.csv")
genotypes <- unique(c(relatedness$ID1, relatedness$ID2))
indiv_covars$genotyped <- ifelse(indiv_covars$Dolphin.ID %in% genotypes, "Y", "N")
statuses <- sightings[,c("Dolphin.ID", "Combined.ID")] |> unique()
affil_females <- merge(statuses, indiv_covars, by = "Dolphin.ID", all.x = TRUE)
affil_females <- affil_females[which(affil_females$genotyped == "Y"), ]
#Adding separate columns for Repro.ID and Age.ID
affil_females <- affil_females %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask <- schedulize(affil_females,
id = "Combined.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
affil_sightings <- sightings[which(sightings$Combined.ID %in% affil_females$Combined.ID), ]
#Adding separate columns for Repro.ID and Age.ID
affil_sightings <- affil_sightings %>%
mutate(Repro.ID = sub("^([^.]+\\.[^.]+).*", "\\1", Combined.ID)) %>%
mutate(Age.ID = paste(sub("\\..*", "", Combined.ID), sub(".*\\.(\\w+)$", "\\1", Combined.ID), sep = "."))
#Calculating SRI
masked_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Combined.ID",
mask = affil_mask)
masked_network[is.nan(masked_network)] <- 0
masked_network[is.na(masked_network)] <- 0
combined_list <- mat2dat(masked_network, value.name = "weight")
combined_list$Dolphin.ID1 <- affil_females$Dolphin.ID[match(combined_list$ID1, affil_females$Combined.ID)]
combined_list$Dolphin.ID2 <- affil_females$Dolphin.ID[match(combined_list$ID2, affil_females$Combined.ID)]
combined_pairs <- merge_pairs(combined_list, pairwise,
xID1 = "Dolphin.ID1", xID2 = "Dolphin.ID2",
yID1 = "Dolphin1", yID2 = "Dolphin2",
all.x = TRUE, all.y = FALSE)
combined_list <- mat2dat(masked_network, value.name = "weight")
combined_list$Dolphin.ID1 <- affil_females$Dolphin.ID[match(combined_list$ID1, affil_females$Combined.ID)]
combined_list$Dolphin.ID2 <- affil_females$Dolphin.ID[match(combined_list$ID2, affil_females$Combined.ID)]
combined_pairs <- merge_pairs(combined_list, pairwise,
xID1 = "Dolphin.ID1", xID2 = "Dolphin.ID2",
yID1 = "Dolphin1", yID2 = "Dolphin2",
all.x = TRUE, all.y = FALSE)
combined_pairs <- combined_pairs[which(combined_pairs$weight!= 0),]
combined_pairs <- reduce_pairs(combined_pairs, ID1 = "ID1", ID2 = "ID2")
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
kin_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
library(igraph)
kin_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
sessionInfo()
update.ap
update.packages("igraph")
sessionInfo()
update.packages(igraph)
update.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
print(network)
View(affil_females)
# mask the data so that association rates are only estimated in the timeframe where both members are alive
affil_mask_repro <- schedulize(affil_females,
id = "Repro.ID",
start = "entrydate",
end = "departdate",
dates = dates,
format = "mask")
repro_mask_network <- simple_ratio(sightings = affil_sightings,
group_variable = "Observation.ID",
dates = "Observation.Date",
IDs = "Repro.ID",
mask = affil_mask_repro)
repro_mask_network[is.nan(repro_mask_network)] <- 0
repro_mask_network[is.na(repro_mask_network)] <- 0
repro_network <- graph_from_adjacency_matrix(repro_mask_network, mode = "undirected", weighted = TRUE)
str_repro <- strength(repro_network)
str_repro_df <- data.frame(name = V(repro_network)$name, strength = str_repro)
View(str_repro_df)
#Merge repro strength to affil females dataframe
affil_females <- merge(affil_females, str_repro_df, by.x = "Repro.ID", by.y = "name", all.x = TRUE)
affil_females <- affil_females %>% rename(repro.strength = strength)
View(affil_females)
affil_sightings <- merge(affil_sightings, str_repro_df, by.x = "Repro.ID", by.y = "name", all.x = TRUE)
affil_sightings <- affil_sightings %>% rename(repro.strength = strength)
View(affil_sightings)
#Setting vertex attributes to each reproductive category
repro_network <- set_vertex_attr(repro_network, "ReproCat",
value = sightings$ReproCat[match(V(repro_network)$name, sightings$Repro.ID)])
###############
#Repro Analysis
###############
#Average raw value per repro category across all females
lact <- affil_females %>%
filter(grepl("\\.lact$", Repro.ID)) %>%
summarise(lact = mean(repro.strength))
cyc <- affil_females %>%
filter(grepl("\\.cyc$", Repro.ID)) %>%
summarise(cyc = mean(repro.strength))
preg <- affil_females %>%
filter(grepl("\\.preg$", Repro.ID)) %>%
summarise(preg = mean(repro.strength))
juvenile <- affil_females %>%
filter(grepl("\\.juvenile$", Repro.ID)) %>%
summarise(juvenile = mean(repro.strength))
avg_repro_strength <- bind_cols(cyc, juvenile, lact, preg)
View(avg_repro_strength)
extract_state <- function(Repro.ID) {
return(sub(".*\\.", "", Repro.ID))
}
affil_females$ReproCat <- sapply(affil_females$Repro.ID, extract_state)
affil_females$norm_repro <- mapply(function(repro.strength, ReproCat) {
avg_value <- avg_repro_strength[[ReproCat]]
return(repro.strength / avg_value)
}, affil_females$repro.strength, affil_females$ReproCat)
#Code not working to get rid of character 0
affil_females$norm_repro[affil_females$norm_repro == "character(0)"] <- NA
View(affil_females)
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, no_unk_affil, mean)
#filter out unknown ReproCat
no_unk_affil <- subset(affil_females, ReproCat != "unknown")
no_unk_affil$norm_repro <- as.numeric(no_unk_affil$norm_repro)
avg_norm_repro <- aggregate(norm_repro ~ ReproCat, no_unk_affil, mean)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
View(no_unk_affil)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
library(SocGen)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
means_raw <- no_unk_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm_repro, na.rm = TRUE))
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means_raw, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means_raw, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(no_unk_affil, aes(x = ReproCat, y = repro.strength, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Repro Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
#Filter out reprosightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
no_unk_affil <- no_unk_affil %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
#Calculating total average strength per individual across all states
no_unk_affil <- no_unk_affil %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.str = mean(repro.strength),
norm.repro.indiv = avg.tot.str / repro.strength)
#No Nan or inf
clean_affil <- no_unk_affil %>%
filter(!is.nan(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
#plot normalized values with average shown across each state
means <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm.repro.indiv, na.rm = TRUE))
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(means, aes(x = ReproCat, y = mean_value, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength")+
theme_minimal() +
theme(legend.position = "none")
View(avg_norm_repro)
View(affil_sightings)
View(no_unk_affil)
View(avg_norm_repro)
#filter out unknown ReproCat
no_unk_affil <- subset(affil_females, ReproCat != "unknown")
no_unk_affil$norm_repro <- as.numeric(no_unk_affil$norm_repro)
#Filter out reprosightings >= 5 from affil_sightings
filtered_sightings <- affil_sightings %>% filter(ReproSightings >= 5)
View(filtered_sightings)
no_unk_affil <- no_unk_affil %>%
filter(Combined.ID %in% filtered_sightings$Combined.ID)
View(filtered_sightings)
View(sightings)
View(affil_females)
View(affil_sightings)
View(affil_females)
View(affil_sightings)
ggplot(no_unk_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(no_unk_affil, aes(x = ReproCat, y = repro.strength, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Repro Strength") +
theme_minimal() +
theme(legend.position = "none")
View(no_unk_affil)
View(no_unk_affil)
#Calculating total average strength per individual across all states
no_unk_affil <- no_unk_affil %>%
group_by(Dolphin.ID) %>%
mutate(avg.tot.str = mean(repro.strength),
norm.repro.indiv = avg.tot.str / repro.strength)
#No Nan or inf
clean_affil <- no_unk_affil %>%
filter(!is.nan(norm.repro.indiv) & !is.infinite(norm.repro.indiv))
View(clean_affil)
#plot normalized values with average shown across each state
means <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm.repro.indiv, na.rm = TRUE))
View(means)
View(means_raw)
#plot normalized-inidividual values with average shown across each state
means_indiv <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm.repro.indiv, na.rm = TRUE))
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means_indiv, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means_indiv, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
ggplot(means, aes(x = ReproCat, y = mean_value, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength")+
theme_minimal() +
theme(legend.position = "none")
ggplot(means_indiv, aes(x = ReproCat, y = mean_value, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength")+
theme_minimal() +
theme(legend.position = "none")
View(clean_affil)
#Repro strength normalized strength to the category level
ggplot(clean_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
labs(x = "Repro State", y = "Normalized Strength") +
theme_minimal() +
theme(legend.position = "none")
View(means_raw)
means_raw <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm_repro, na.rm = TRUE))
View(means_raw)
View(no_unk_affil)
View(clean_affil)
View(affil_females)
#Plot repro strength normalized to individual with average shown across each state
means_indiv <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm.repro.indiv, na.rm = TRUE))
ggplot(clean_affil, aes(x = ReproCat, y = norm.repro.indiv, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means_indiv, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means_indiv, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength to Individual") +
theme_minimal() +
theme(legend.position = "none")
#Repro strength normalized strength to the category level
means_norm <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm_repro, na.rm = TRUE))
ggplot(clean_affil, aes(x = ReproCat, y = norm_repro, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means_norm, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means_norm, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Normalized Strength to Category") +
theme_minimal() +
theme(legend.position = "none")
#Raw Repro Strength
means_raw <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(norm_repro, na.rm = TRUE))
View(means_raw)
View(means_norm)
View(means_raw)
#Raw Repro Strength
means_raw <- clean_affil %>%
group_by(ReproCat) %>%
summarise(mean_value = mean(repro.strength, na.rm = TRUE))
View(means_raw)
ggplot(clean_affil, aes(x = ReproCat, y = repro.strength, fill = ReproCat)) +
geom_boxplot() +
geom_segment(data = means_raw, aes(x = as.numeric(ReproCat) - 0.2, xend = as.numeric(ReproCat) + 0.2,
y = mean_value, yend = mean_value), color = "black", size = 1) +
geom_text(data = means_raw, aes(x = ReproCat, y = mean_value, label = round(mean_value, 2)),
vjust = -0.5, color = "black") +
labs(x = "Repro State", y = "Raw Repro Strength") +
theme_minimal() +
theme(legend.position = "none")
View(no_unk_affil)
View(affil_females)
View(clean_affil)
View(combined_list)
View(combined_pairs)
#Calculating kin strength
str_kin <- strength(kin_graph)
network <- graph_from_data_frame(combined_pairs[,c("ID1", "ID2", "weight", "DyadML", "Closekin")],
directed = FALSE)
kin_graph <- subgraph_from_edges(network, eids = E(network)[E(network)$Closekin == "Y"])
